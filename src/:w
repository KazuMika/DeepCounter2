# -*- coding: utf-8 --
import time
import os
import csv
import threading
import datetime
import random
from collections import deque
import cv2
import numpy as np
import torch
import torch.backends.cudnn as cudnn

from tracker.sort import Sort
from tracker.iou_tracking import Iou_Tracker
from utils.fpsrate import FpsWithTick
from pathlib import Path

import cv2
import torch
import torch.backends.cudnn as cudnn
from numpy import random

from models.experimental import attempt_load
from utils.datasets import LoadStreams, LoadImages
from utils.general import check_img_size, check_requirements, check_imshow, non_max_suppression, apply_classifier, \
    scale_coords, xyxy2xywh, strip_optimizer, set_logging, increment_path
from utils.plots import plot_one_box
from utils.torch_utils import select_device, load_classifier, time_synchronized

cudnn.benchmark = True


class Counter(object):
    def __init__(self, args):
        self.time = time.time()
        self.fpsWithTick = FpsWithTick()
        self.frame_count = 0
        self.fps_count = 0
        self.flag_of_recall_q = ''
        self.flag_of_detection_q = ''
        self.p = 0
        self.q = deque()
        self.i = 0
        self.flag_of_realtime = True
        self.recallq = deque()
        self.flag_of_detection_q = False
        self.flag_of_recall_q = True
        self.args = args
        self.path = self.args.save_dir_path
        self.conf_thres = self.args.conf_thres
        self.nms_thres = self.args.nms_thres
        self.img_size = self.args.img_size
        self.device = torch.device('cuda' if args.cuda else 'cpu')
        self.y_pred_list = []
        self.font = cv2.FONT_HERSHEY_DUPLEX
        self.max_age = 2
        self.ssd_th = 0.4
        self.frame_rate = 20
        self.mode = self.args.mode
        self.tracking_alg = self.args.tracking_alg
        self.model = args.model
        self.fps_eval = self.args.fps_eval
        self.video = self.args.video
        self.l = 10  # the lower bound of processing rate  by koyo
        self.w = 0  # the window size of frames in which objects are not detected
        self.save_root_dir = self.path

        if self.model == 'yolo':
            self.model_setup(opt=self.args)
        self.prepare()

        f = open(os.path.join(self.save_root_dir, 'y_pred.csv'), "w")
        self.writer = csv.writer(f, lineterminator='\n')

    def model_setup(opt, save_img=False):
        source, weights, view_img, save_txt, imgsz = opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size
        save_img = not opt.nosave and not source.endswith('.txt')  # save inference images
        webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(
            ('rtsp://', 'rtmp://', 'http://', 'https://'))

        # Directories
        save_dir = Path(increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok))  # increment run
        (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

        # Initialize
        set_logging()
        device = select_device(opt.device)
        half = device.type != 'cpu'  # half precision only supported on CUDA

        # Load model
        model = attempt_load(weights, map_location=device)  # load FP32 model
        stride = int(model.stride.max())  # model stride
        imgsz = check_img_size(imgsz, s=stride)  # check img_size
        if half:
            model.half()  # to FP16

        # Second-stage classifier
        classify = False
        if classify:
            modelc = load_classifier(name='resnet101', n=2)  # initialize
            modelc.load_state_dict(torch.load('weights/resnet101.pt', map_location=device)['model']).to(device).eval()

        # Set Dataloader
        vid_path, vid_writer = None, None
        if webcam:
            view_img = check_imshow()
            cudnn.benchmark = True  # set True to speed up constant image size inference
            dataset = LoadStreams(source, img_size=imgsz, stride=stride)
        else:
            dataset = LoadImages(source, img_size=imgsz, stride=stride)

        # Get names and colors
        names = model.module.names if hasattr(model, 'module') else model.names
        colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

        # Run inference
        if device.type != 'cpu':
            model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
        t0 = time.time()
        for path, img, im0s, vid_cap in dataset:
            img = torch.from_numpy(img).to(device)
            img = img.half() if half else img.float()  # uint8 to fp16/32
            img /= 255.0  # 0 - 255 to 0.0 - 1.0
            if img.ndimension() == 3:
                img = img.unsqueeze(0)

            # Inference
            t1 = time_synchronized()
            pred = model(img, augment=opt.augment)[0]

            # Apply NMS
            pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)
            t2 = time_synchronized()

            # Apply Classifier
            if classify:
                pred = apply_classifier(pred, modelc, img, im0s)

            # Process detections
            for i, det in enumerate(pred):  # detections per image
                if webcam:  # batch_size >= 1
                    p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count
                else:
                    p, s, im0, frame = path, '', im0s, getattr(dataset, 'frame', 0)

                p = Path(p)  # to Path
                save_path = str(save_dir / p.name)  # img.jpg
                txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt
                s += '%gx%g ' % img.shape[2:]  # print string
                gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
                if len(det):
                    # Rescale boxes from img_size to im0 size
                    det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                    # Print results
                    for c in det[:, -1].unique():
                        n = (det[:, -1] == c).sum()  # detections per class
                        s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                    # Write results
                    for *xyxy, conf, cls in reversed(det):
                        if save_txt:  # Write to file
                            xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                            line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format
                            with open(txt_path + '.txt', 'a') as f:
                                f.write(('%g ' * len(line)).rstrip() % line + '\n')

                        if save_img or view_img:  # Add bbox to image
                            label = f'{names[int(cls)]} {conf:.2f}'
                            plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=3)

                # Print time (inference + NMS)
                print(f'{s}Done. ({t2 - t1:.3f}s)')

                # Stream results
                if view_img:
                    cv2.imshow(str(p), im0)
                    cv2.waitKey(1)  # 1 millisecond

                # Save results (image with detections)
                if save_img:
                    if dataset.mode == 'image':
                        cv2.imwrite(save_path, im0)
                    else:  # 'video' or 'stream'
                        if vid_path != save_path:  # new video
                            vid_path = save_path
                            if isinstance(vid_writer, cv2.VideoWriter):
                                vid_writer.release()  # release previous video writer
                            if vid_cap:  # video
                                fps = vid_cap.get(cv2.CAP_PROP_FPS)
                                w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                                h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                            else:  # stream
                                fps, w, h = 30, im0.shape[1], im0.shape[0]
                                save_path += '.mp4'
                            vid_writer = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                        vid_writer.write(im0)

        if save_txt or save_img:
            s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
            print(f"Results saved to {save_dir}{s}")

        print(f'Done. ({time.time() - t0:.3f}s)')

    def prepare(self):
        if self.mode == 'precision':
            self.save_root_dir = self.path
            self.image_dir = os.path.join(self.save_root_dir, 'images')
            self.movie_dir = os.path.join(self.save_root_dir, 'movies')
            if not os.path.exists(os.path.join(self.image_dir)):
                os.makedirs(os.path.join(self.image_dir))
            if not os.path.exists(os.path.join(self.movie_dir)):
                os.makedirs(os.path.join(self.movie_dir))
            if self.args.test:
                self.movies = ['./testgomi2.mp4']
            else:
                self.movies = [movie for movie in find_all_files(
                    '/home/quantan/back_kanen_1_8_data_mp4/') if '.mp4' in movie]
                self.movies.sort()
        elif self.mode == 'visualization':
            self.save_root_dir = self.path
            self.image_dir = os.path.join(self.save_root_dir, 'images')
            self.movie_dir = os.path.join(self.save_root_dir, 'movies')
            self.gps_datelist = []
            self.gps_list = []
            self.gps_dir = 'visualize_' + self.model
            self.gps_image_dir = 'gps_count_images'
            self.gps_location_dir = 'gps_locations_data'
            if not os.path.exists(os.path.join(self.save_root_dir,
                                               self.gps_dir, self.gps_image_dir)):
                os.makedirs(os.path.join(self.save_root_dir,
                                         self.gps_dir, self.gps_image_dir))
            if not os.path.exists(os.path.join(self.save_root_dir,
                                               self.gps_dir, self.gps_location_dir)):
                os.makedirs(os.path.join(self.save_root_dir,
                                         self.gps_dir, self.gps_location_dir))
            self.movies = [movie for movie in find_all_files(
                '/home/quantan/dataset/datavisual') if "CH1.264" in movie]
            self.movies.sort()

        elif self.mode == 'jetson':
            self.save_root_dir = '/mnt/hdd1/'
            self.save_image_dir = os.path.join(self.save_root_dir, 'image_results/')
            self.save_movie_dir = os.path.join(self.save_root_dir, 'movie_results/')
            if not os.path.exists(self.save_image_dir):
                os.makedirs(self.save_image_dir)
            if not os.path.exists(self.save_movie_dir):
                os.makedirs(self.save_movie_dir)

        elif self.mode == 'realtime':
            self.save_root_dir = self.path
            self.image_dir = os.path.join(self.save_root_dir, 'images')
            self.movie_dir = os.path.join(self.save_root_dir, 'movies')
            if not os.path.exists(os.path.join(self.image_dir)):
                os.makedirs(os.path.join(self.image_dir))
            if not os.path.exists(os.path.join(self.movie_dir)):
                os.makedirs(os.path.join(self.movie_dir))
            if self.args.test:
                self.movies = ['./testgomi2.mp4']
            else:
                self.movies = [movie for movie in find_all_files(
                    '/home/quantan/back_kanen_1_8_data_mp4/') if '.mp4' in movie]
                self.movies.sort()
        else:
            pass

    def execution(self):
        if self.mode == 'precision':
            for movie in self.movies:
                print(movie)
                self.evalate_precision(movie)

            self.writer.writerows(self.y_pred_list)

        elif self.mode == 'visualization':
            for movie in self.movies:
                print(movie)
                datevs = movie.split('/')[5]

                if len(self.gps_datelist) == 0:
                    self.gps_datelist.append(datevs)
                    gps_log = open(os.path.join(
                        self.save_root_dir, self.gps_dir, self.gps_location_dir, datevs+'.csv'), 'w')
                    writer2 = csv.writer(gps_log, lineterminator='\n')
                    self.gps_list = []
                elif datevs not in self.gps_datelist:
                    self.gps_datelist.append(datevs)
                    writer2.writerows(self.gps_list)
                    gps_log.close()
                    gps_log = open(os.path.join(
                        self.save_root_dir, self.gps_dir, self.gps_location_dir, datevs+'.csv'), 'w')
                    self.gps_list = []
                    writer2 = csv.writer(gps_log, lineterminator='\n')

                self.visualization(movie)

            writer2.writerows(self.gps_list)
            gps_log.close()
            self.writer.writerows(self.y_pred_list)
        elif self.mode == 'jetson':
            self.counting_on_jetson()
        elif self.mode == 'realtime':
            for movie in self.movies:
                print(movie)
                self.realtime_detection(movie)

            self.writer.writerows(self.y_pred_list)

        else:
            pass

    def evalate_precision(self, path_to_movie):
        cap = cv2.VideoCapture(path_to_movie)
        basename = os.path.basename(path_to_movie).replace('.mp4', '')
        movie_id = basename[0:4]

        save_movie_path = os.path.join(self.movie_dir, basename+'.mp4')
        if self.video:
            fourcc = cv2.VideoWriter_fourcc('m', 'p', '4', 'v')
            video = cv2.VideoWriter(save_movie_path, fourcc,
                                    self.frame_rate, (int(cap.get(3)), int(cap.get(4))))
        height = cap.get(4)
        line_down = int(9*(height/10))

        if self.tracking_alg == 'sort':
            tracker = Sort(1, self.max_age, line_down, movie_id,
                           self.image_dir, '', basename)
        else:
            tracker = Iou_Tracker(
                line_down, self.image_dir, movie_id, self.max_age, '', basename)

        while(cap.isOpened()):
            ret, frame = cap.read()
            if ret:
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            else:
                break

            if self.tracking_alg == 'ssd':
                cords = np.array(self.detect_image(rgb_image))
            else:
                cords = self.detect_image(rgb_image)

            tracker.update(cords, frame, fps_eval=self.fps_eval)

            if self.video:
                video.write(frame)

        if self.fps_eval:
            print("Avarage fps : {0:.2f}".format(
                tracker.fps_count / tracker.frame_count))

        self.y_pred_list.append((movie_id, tracker.cnt_down))
        cap.release()
        cv2.destroyAllWindows()

        if self.video:
            video.release()

        self.time = time.time()-self.time
        print('end_time:{}'.format(self.time))

    def visualization(self, path_to_movie):
        cap = cv2.VideoCapture(path_to_movie)
        basename = os.path.basename(path_to_movie)
        movie_date = path_to_movie.split('/')[-3]

        save_image_dir = os.path.join(
            self.save_root_dir, self.gps_dir, self.gps_image_dir)
        movie_id = basename[0:4]

        height = cap.get(4)
        line_down = int(9*(height/10))

        gps_path = path_to_movie.replace('H264/CH1.264', 'SNS/Sns.txt')
        if not os.path.exists(gps_path):
            return None

        f2 = open(gps_path, 'r')
        gpss = [gps.strip() for gps in f2.readlines()]
        gps_count = 0
        if self.tracking_alg == 'sort':
            tracker = Sort(1, 3, line_down, movie_id,
                           save_image_dir, movie_date)
        else:
            tracker = Iou_Tracker(line_down, save_image_dir,
                                  movie_id, 2, movie_date)

        while(cap.isOpened()):
            ret, frame = cap.read()
            if ret:
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            else:
                break

            if self.tracking_alg == 'sort':
                cords = np.array(self.detect_image(frame))
            else:

                cords = self.detect_image(rgb_image)
            tracker.update(cords, frame, gpss=gpss, gps_count=gps_count,
                           visualize=True, gps_list=self.gps_list)
            gps_count += 1

        cap.release()
        # video.release()
        cv2.destroyAllWindows()
        self.y_pred_list.append((movie_id, tracker.cnt_down))

    def counting_on_jetson(self):
        cap = cv2.VideoCapture('/home/quantan/DTCEvaluation/yolov3_dtceval/testgomi2.mp4')
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

        # cap = cv2.VideoCapture('testgomi2.mp4')
        time_stamp = datetime.datetime.today().strftime("%Y_%m_%d_%H_%M_%S")
        save_movie_dir = os.path.join(self.save_movie_dir, (time_stamp+'.avi'))
        if not os.path.exists(self.save_image_dir):
            os.mkdir(self.save_image_dir)

        # fourcc = cv2.VideoWriter_fourcc('m', 'p', '4', 'v')
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        video = cv2.VideoWriter(save_movie_dir, fourcc,
                                20, (int(cap.get(3)), int(cap.get(4))))

        prediction = []
        prediction2 = []

        height = cap.get(4)
        line_down = int(9*(height/10))

        frame_count = 0
        fps_count = 0
        fpsWithTick = FpsWithTick()
        count = 0
        if self.tracking_alg == 'sort':
            tracker = Sort(1, 3, line_down,
                           save_image_dir=save_movie_dir)
        else:
            tracker = Iou_Tracker(line_down, save_image_dir=self.save_image_dir,
                                  save_movie_dir=save_movie_dir)

        while(cap.isOpened()):
            time_stamp = datetime.datetime.today().strftime("%Y_%m_%d_%H_%M_%S")
            count += 1
            ret, frame = cap.read()
            if ret:
                frame2 = frame.copy()
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            else:
                break

            if self.tracking_alg == 'sort':
                cords = np.array(self.detect_image(rgb_image))
            else:
                cords = self.detect_image(rgb_image)
            tracker.update(cords, frame, prediction2=prediction2,
                           time_stamp=time_stamp, demo=True)

            video.write(frame2)

            fps1 = fpsWithTick.get()
            fps_count += fps1
            frame_count += 1
            if frame_count == 0:
                frame_count += 1

            if count % 50 == 0:
                f = open(os.path.join(self.save_root_dir, 'prediction.csv'), "a")
                f2 = open(os.path.join(self.save_root_dir, 'prediction2.csv'), "a")
                writer = csv.writer(f, lineterminator='\n')
                writer2 = csv.writer(f2, lineterminator='\n')
                time_stamp = datetime.datetime.today().strftime("%Y_%m_%d_%H_%M_%S")
                avg_fps = (fps_count / frame_count)
                fps_count = 0
                frame_count = 0
                prediction.append((time_stamp, tracker.cnt_down, avg_fps))
                writer.writerows(prediction)
                writer2.writerows(prediction2)
                save_movie_dir = os.path.join(self.save_movie_dir, (time_stamp+'.avi'))
                prediction = []
                prediction2 = []

                # fourcc = cv2.VideoWriter_fourcc('m', 'p', '4', 'v')
                fourcc = cv2.VideoWriter_fourcc(*'XVID')
                video = cv2.VideoWriter(save_movie_dir, fourcc,
                                        20, (int(cap.get(3)), int(cap.get(4))))
                f.close()

            k = cv2.waitKey(30) & 0xff
            if k == 27:
                break

        cap.release()
        video.release()
        cv2.destroyAllWindows()

    def detect_image(self, frame):
        if self.model == 'yolo':
            img, _, _, _ = letterbox(frame, height=self.img_size)
            # Normalize RGB
            img = img[:, :, ::-1].transpose(2, 0, 1)
            img = np.ascontiguousarray(img, dtype=np.float32)
            img /= 255.0
            img = torch.from_numpy(img).unsqueeze(0).to(self.device)

            pred = self.net(img)
            pred = pred[pred[:, :, 4] > self.conf_thres]
            cords = []

            if len(pred) > 0:
                detections = non_max_suppression(
                    pred.unsqueeze(0), self.conf_thres, self.nms_thres)[0]
                if detections is not None:

                    detections[:, :4] = scale_coords(
                        self.img_size, detections[:, :4], frame.shape)

                    for x1, y1, x2, y2, conf, cls_conf, cls in detections:
                        pt = np.array(
                            [x1.item(), y1.item(), x2.item(), y2.item(), conf.item()])
                        cords.append(pt)

            return cords

        elif self.model == 'ssd':
            x = cv2.resize(frame, (300, 300)).astype(np.float32)
            x -= (104.0, 117.0, 123.0)

            x = x.astype(np.float32)
            x = x[:, :, ::-1].copy()

            x = torch.from_numpy(x).permute(2, 0, 1)
            xx = x.unsqueeze(0).to(self.device)
            # if torch.cuda.is_available():
            #    xx = xx.cuda()
            y = self.net(xx)

            detections = y.data
            scale = torch.Tensor([frame.shape[1::-1], frame.shape[1::-1]]).view(4)
            cords = []
            # texts = []
            for i in range(1, 2):
                j = 0
                while detections[0, i, j, 0] >= self.ssd_th:
                    # score = detections[0, i, j, 0]
                    # label_name = labels[i-1]
                    # display_txt = '%s: %.2f' % (label_name, score)
                    # label_name = labels[i-1]
                    pt = (detections[0, i, j, 1:]*scale).cpu().numpy()
                    cords.append(pt)
                    # texts.append(display_txt)
                    j += 1

            return cords

    def realtime_detection(self, path_to_movie):
        cap = cv2.VideoCapture(path_to_movie)
        basename = os.path.basename(path_to_movie).replace('.mp4', '')
        movie_id = basename[0:4]

        save_movie_path = os.path.join(self.movie_dir, basename+'.mp4')
        print(save_movie_path)
        if self.video:
            fourcc = cv2.VideoWriter_fourcc('m', 'p', '4', 'v')
            video = cv2.VideoWriter(save_movie_path, fourcc,
                                    self.frame_rate, (int(cap.get(3)), int(cap.get(4))))
        height = cap.get(4)
        line_down = int(9*(height/10))
        t1 = threading.Thread(target=self.recall_q2, args=(line_down, height, movie_id, basename))
        t1.start()
        i = 0

        while(cap.isOpened()):
            i += 1
            ret, frame = cap.read()
            if ret:
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                self.q.append(rgb_image)
            else:
                self.flag_of_realtime = False
                break
            if self.video:
                video.write(frame)

    def create_tracker(self, tracking_alg, max_age, max_hit, line_down, movie_id,
                       image_dir, basename, movie_date='',):
        pass

    def recall_q2(self, line_down, height, movie_id, basename):
        LC = self.l/self.frame_rate
        Ps = 0.1
        Pd = 1
        Tw = 10
        # self.tracking_alg = 'iou'
        if self.tracking_alg == 'sort':
            tracker = Sort(self.max_age, 3, line_down, movie_id,
                           self.image_dir, '', basename)
        else:
            tracker = Iou_Tracker(line_down, self.image_dir, movie_id, self.max_age, '', basename)
        i = 0
        while self.flag_of_realtime or self.q:
            if self.q:
                i += 1
                newFrame = self.q.popleft()
                if newFrame is not None:
                    Ran = random.random()
                    if len(self.recallq) < 10:
                        self.recallq.append(newFrame)

                        continue
                    if Ran < Pd:
                        cords = self.detect_image(newFrame)
                        if cords:
                            Pd = 1
                            self.w = 0
                            while self.recallq:
                                img = self.recallq.popleft()
                                detectQ = self.detect_image(img)
                                tracker.update(detectQ, img)

                        else:
                            self.w += 1
                            if self.w >= Tw:
                                Pd = max(Pd - Ps, LC)
                    else:
                        if Tw > len(self.recallq):
                            self.recallq.append(newFrame)
                        else:
                            self.recallq.append(newFrame)
                            self.recallq.popleft()
                else:
                    continue
        self.time = time.time()-self.time
        print('end_time:{}'.format(self.time))
